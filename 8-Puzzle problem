import heapq

# Define the goal state
GOAL_STATE = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  # 0 is the blank tile

# Calculate Manhattan distance as heuristic
def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            val = state[i][j]
            if val != 0:
                target_x = (val - 1) // 3
                target_y = (val - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance

# Find position of the blank tile (0)
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

# Generate next possible states
def get_neighbors(state):
    neighbors = []
    x, y = find_blank(state)
    directions = [(-1,0), (1,0), (0,-1), (0,1)]  # up, down, left, right

    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

# Check if the state is the goal
def is_goal(state):
    return state == GOAL_STATE

# A* search algorithm
def a_star(start_state):
    visited = set()
    heap = []
    heapq.heappush(heap, (manhattan_distance(start_state), 0, start_state, []))

    while heap:
        est_total, cost, state, path = heapq.heappop(heap)
        state_tuple = tuple(map(tuple, state))

        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        if is_goal(state):
            return path + [state]

        for neighbor in get_neighbors(state):
            if tuple(map(tuple, neighbor)) not in visited:
                heapq.heappush(heap, (cost + 1 + manhattan_distance(neighbor),
                                      cost + 1,
                                      neighbor,
                                      path + [state]))
    return None

# Pretty print the board
def print_board(state):
    for row in state:
        print(' '.join(str(num) if num != 0 else ' ' for num in row))
    print()

# Driver Code
if __name__ == "__main__":
    start_state = [[1, 2, 3],
                   [4, 0, 6],
                   [7, 5, 8]]

    print("Initial State:")
    print_board(start_state)

    solution = a_star(start_state)

    if solution:
        print("Steps to solve the 8 Puzzle:\n")
        for step_num, step in enumerate(solution):
            print(f"Step {step_num}:")
            print_board(step)
    else:
        print("No solution found.")
